CxList personalInfo = Find_Personal_Info();
CxList sanitizers = NodeJS_Find_Encrypt();
sanitizers.Add(All.GetParameters(Find_ObjectCreations().FindByShortName("Sequelize")));
sanitizers.Add(Find_Integers());

//Remove cases like: (password : hash), where hash was generated by encryption method.
CxList rightSideValue = All.FindByAssignmentSide(CxList.AssignmentSide.Right).GetByAncs(personalInfo.GetFathers());
CxList toRemove = sanitizers.DataInfluencingOn(rightSideValue).GetStartAndEndNodes(CxList.GetStartEndNodesType.EndNodesOnly);
toRemove = All.FindByAssignmentSide(CxList.AssignmentSide.Left).GetByAncs(toRemove.GetFathers());
toRemove.Add(All.FindDefinition(toRemove));
toRemove.Add(All_Passwords());
personalInfo -= toRemove;

CxList storage = NodeJS_Find_DB_IN();
storage.Add(NodeJS_Find_Write());

result = personalInfo.InfluencingOnAndNotSanitized(storage, sanitizers)
	.ReduceFlow(CxList.ReduceFlowType.ReduceBigFlow)
	.ReduceFlowByPragma();